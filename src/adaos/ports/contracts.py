from __future__ import annotations
from typing import Protocol, Iterable, Mapping, Any, Awaitable, Callable
from adaos.domain import Event, ProcessSpec, SkillId


# --- EventBus ---
class EventBus(Protocol):
    def publish(self, event: Event) -> None: ...
    def subscribe(self, type_prefix: str, handler: Callable[[Event], None]) -> None: ...


# --- Process / Runtime ---
class Process(Protocol):
    async def start(self, spec: ProcessSpec) -> str: ...  # returns handle
    async def stop(self, handle: str, timeout_s: float = 5.0) -> None: ...
    async def status(self, handle: str) -> str: ...  # init/starting/running/stopping/stopped/error


# --- Capabilities ---
class Capabilities(Protocol):
    def check(self, subject: str, required: Iterable[str]) -> bool: ...
    def grant(self, subject: str, caps: Iterable[str]) -> None: ...
    def revoke(self, subject: str, caps: Iterable[str]) -> None: ...


# --- Devices ---
class Devices(Protocol):
    def list(self, typ: str | None = None) -> list[dict[str, Any]]: ...
    def acquire(self, typ: str, policy: Mapping[str, Any]) -> dict[str, Any]: ...
    def release(self, device_id: str) -> None: ...


# --- Storage ---
class KV(Protocol):
    def get(self, key: str, default: Any = None) -> Any: ...
    def set(self, key: str, value: Any) -> None: ...
    def delete(self, key: str) -> None: ...


class SQL(Protocol):
    def connect(self) -> Any: ...


# --- Secrets ---
class Secrets(Protocol):
    def put(self, name: str, value: bytes, scope: str) -> None: ...
    def get(self, name: str, scope: str) -> bytes: ...


# --- Net (egress policies) ---
class Net(Protocol):
    def allowed(self, subject: str, host: str, port: int) -> bool: ...


# --- Updates ---
class Updates(Protocol):
    def fetch(self, id: str, version: str, source: str) -> str: ...  # path
    def verify(self, artifact_path: str) -> bool: ...
    def install(self, artifact_path: str) -> None: ...
    def rollback(self, id: str, version: str) -> None: ...
