#!/usr/bin/env bash
# tools/bootstrap.sh ‚Äî —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bootstrap (macOS/Linux)
set -euo pipefail

SUBMODULE_PATH="src/adaos/integrations/inimatic"

# --- helpers ---------------------------------------------------------------

log()   { printf "\033[36m‚ñ∂ %s\033[0m\n" "$*"; }
ok()    { printf "\033[32m‚úì %s\033[0m\n" "$*"; }
warn()  { printf "\033[33m‚ö† %s\033[0m\n" "$*"; }
fail()  { printf "\033[31m‚õî %s\033[0m\n" "$*"; exit 1; }

have()  { command -v "$1" >/dev/null 2>&1; }

# return "maj.min path" per line
discover_python() {
  local found=0
  # 1) pyenv
  if have pyenv; then
    while read -r v; do
      [[ -z "$v" || "$v" == system* ]] && continue
      local p; p="$(pyenv which -a python 2>/dev/null | grep "/$v/" | head -n1 || true)"
      [[ -x "$p" ]] && { echo "$v $p"; found=1; }
    done < <(pyenv versions --bare 2>/dev/null)
  fi
  # 2) common python3.x on PATH
  for x in 3.12 3.11 3.10 3.9; do
    if have "python$x"; then
      echo "$x $(command -v python$x)"; found=1
    fi
  done
  # 3) plain python3
  if have python3; then
    local v; v="$(python3 -c 'import sys;print(f"{sys.version_info[0]}.{sys.version_info[1]}")')" || true
    [[ -n "${v:-}" ]] && echo "$v $(command -v python3)" && found=1
  fi
  # 4) fallback python
  if [[ $found -eq 0 && $(have python; echo $?) -eq 0 ]]; then
    local v; v="$(python -c 'import sys;print(f"{sys.version_info[0]}.{sys.version_info[1]}")')" || true
    [[ -n "${v:-}" ]] && echo "$v $(command -v python)"
  fi
}

choose_python() {
  mapfile -t CANDS < <(discover_python | sort -Vr) || true
  [[ ${#CANDS[@]} -eq 0 ]] && fail "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 3.11+ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
  log "–ù–∞–π–¥–µ–Ω—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—ã Python:"
  local i=0
  for line in "${CANDS[@]}"; do
    printf "  [%d] %s\n" "$i" "$line"
    ((i = i + 1))
  done
  # default: –ø–µ—Ä–≤—ã–π —Å –≤–µ—Ä—Å–∏–µ–π >=3.11, –∏–Ω–∞—á–µ [0]
  local def_idx=0
  for idx in "${!CANDS[@]}"; do
    [[ "${CANDS[$idx]}" =~ ^(3\.11|3\.12) ]] && { def_idx=$idx; break; }
  done
  read -r -p "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä Python –¥–ª—è venv (Enter = ${def_idx}): " CHOICE
  [[ -z "${CHOICE:-}" ]] && CHOICE=$def_idx
  [[ "$CHOICE" =~ ^[0-9]+$ ]] || CHOICE=$def_idx
  local sel="${CANDS[$CHOICE]}"
  PY_VER="${sel%% *}"
  PY_BIN="${sel#* }"
  log "–í—ã–±—Ä–∞–Ω–æ: Python ${PY_VER} -> ${PY_BIN}"
  # hard guard
  [[ "${PY_VER%%.*}" -ge 3 && "${PY_VER#*.}" -ge 10 ]] || fail "–ù—É–∂–µ–Ω Python ‚â• 3.10 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º 3.11+)."
}

smart_npm_install() {
  # prefers pnpm if present; else tries npm ci -> falls back to npm install
  if have pnpm; then
    pnpm install
    USED_PKG_CMD="pnpm install"
    return
  fi
  if [[ -f package-lock.json ]]; then
    if npm ci; then
      USED_PKG_CMD="npm ci"
    else
      warn "npm ci –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (lock —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω). –î–µ–ª–∞—é: npm install"
      npm install
      USED_PKG_CMD="npm install"
    fi
  else
    npm install
    USED_PKG_CMD="npm install"
  fi
}

open_subshell_help() {
  # if BOOTSTRAP_OPEN_SUBSHELL=1 then open interactive subshell with venv activated
  [[ "${BOOTSTRAP_OPEN_SUBSHELL:-0}" != "1" ]] && return 0
  local help_text
  read -r -d '' help_text <<'EOF' || true
‚úÖ –≥–æ—Ç–æ–≤–æ. venv –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–π –æ–±–æ–ª–æ—á–∫–µ.

–æ–±—ã—á–Ω–æ –¥–∞–ª–µ–µ –∑–∞–ø—É—Å–∫–∞—é—Ç (–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö/–æ–∫–Ω–∞—Ö):

  1) API
     adaos api serve --host 127.0.0.1 --port 8777 --reload

  2) Backend (Inimatic)
     cd src/adaos/integrations/inimatic
     npm run start:api-dev

  3) Frontend (Inimatic)
     cd src/adaos/integrations/inimatic
     npm run start

–ø–æ–¥—Å–∫–∞–∑–∫–∏:
 ‚Ä¢ —Å–º–µ–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é venv ‚Äî —É–¥–∞–ª–∏—Ç–µ .venv –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ bootstrap
 ‚Ä¢ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ lock: BOOTSTRAP_STRICT_LOCK=1 (—Ç–æ–≥–¥–∞ –ø–∞–¥–∞—Ç—å, –µ—Å–ª–∏ npm ci –Ω–µ –ø—Ä–æ—à—ë–ª)
EOF
  # start an interactive subshell with venv sourced and help printed
  if [[ -n "${SHELL:-}" && -x "$SHELL" ]]; then
    "$SHELL" --rcfile <(printf 'source .venv/bin/activate\nprintf "%s\n" "%s"\n' "$help_text" "$help_text") -i
  else
    bash --rcfile <(printf 'source .venv/bin/activate\nprintf "%s\n" "%s"\n' "$help_text" "$help_text") -i
  fi
}

# --- run -------------------------------------------------------------------

log "–ü—Ä–æ–≤–µ—Ä—è—é –∏ –≤—ã–±–∏—Ä–∞—é Python‚Ä¶"
choose_python

log "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é submodule (Inimatic)‚Ä¶"
[[ -d "$SUBMODULE_PATH" ]] || git submodule update --init --recursive
[[ -d "$SUBMODULE_PATH" ]] || fail "–°—É–±–º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '$SUBMODULE_PATH'. –ü—Ä–æ–≤–µ—Ä—å .gitmodules ‚Üí path=‚Ä¶"

log "–°–æ–∑–¥–∞—é venv (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)‚Ä¶"
if [[ -d .venv ]]; then
  VENV_VER="$(. .venv/bin/activate >/dev/null 2>&1 && python -c 'import sys;print(f"{sys.version_info[0]}.{sys.version_info[1]}")' || true)"
  if [[ -z "${VENV_VER:-}" || "$VENV_VER" != "$PY_VER" ]]; then
    warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω .venv –Ω–∞ $VENV_VER ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é –Ω–∞ $PY_VER‚Ä¶"
    rm -rf .venv
  fi
fi
[[ -d .venv ]] || "$PY_BIN" -m venv .venv

log "–°—Ç–∞–≤–ª—é Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (editable)‚Ä¶"
. .venv/bin/activate
python -m pip install -U pip >/dev/null
python -m pip install -e .[dev] || fail "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."

log "–°—Ç–∞–≤–ª—é —Ñ—Ä–æ–Ω—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Inimatic‚Ä¶"
pushd "$SUBMODULE_PATH" >/dev/null
if [[ "${BOOTSTRAP_STRICT_LOCK:-0}" == "1" && -f package-lock.json && ! $(have pnpm; echo $?) -eq 0 ]]; then
  # —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è npm: —Ç–æ–ª—å–∫–æ npm ci
  npm ci || fail "npm ci –Ω–µ –ø—Ä–æ—à—ë–ª –≤ —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ lock: npm install; commit lock."
  USED_PKG_CMD="npm ci"
else
  smart_npm_install
fi
ok "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ($USED_PKG_CMD)"
popd >/dev/null

log "–ì–æ—Ç–æ–≤–ª—é .env‚Ä¶"
[[ -f .env || ! -f .env.example ]] || cp .env.example .env

ok  "Bootstrap –∑–∞–≤–µ—Ä—à—ë–Ω."
printf "\n\033[36müëâ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:\033[0m \033[33msource .venv/bin/activate\033[0m\n"
printf "–∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ \033[33mBOOTSTRAP_OPEN_SUBSHELL=1\033[0m –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∞–±—à–µ–ª–ª.\n\n"

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∞–±—à–µ–ª–ª —Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º venv –∏ –ø–∞–º—è—Ç–∫–æ–π
open_subshell_help
